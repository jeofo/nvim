-- Default providers
vim.g.python3_host_prog = '/opt/homebrew/bin/python'

-- Editor Behavior
vim.opt.number = true
vim.opt.cursorline = true
vim.opt.hidden = true
vim.opt.relativenumber = true
vim.opt.tabstop = 2
vim.opt.shiftwidth = 2
vim.opt.softtabstop = 2
vim.opt.autoindent = true
vim.opt.list = true
vim.opt.listchars = { tab = '▸ ', trail = '·', nbsp = '␣', extends = '»', precedes = '«', eol = '↲' }
vim.opt.scrolloff = 4
vim.opt.ttimeoutlen = 0
vim.opt.viewoptions = 'cursor,folds,slash,unix'
vim.opt.wrap = true
vim.opt.tw = 0
vim.opt.indentexpr = ''
vim.opt.foldmethod = 'indent'
vim.opt.foldlevel = 99
vim.opt.foldenable = true
vim.opt.formatoptions = vim.opt.formatoptions - 'tc'
vim.opt.splitright = true
vim.opt.splitbelow = true
vim.opt.showcmd = true
vim.opt.wildmenu = true
vim.opt.ignorecase = true
vim.opt.smartcase = true
vim.opt.shortmess = vim.opt.shortmess + 'c'
vim.opt.inccommand = 'split'
vim.opt.completeopt = 'longest,noinsert,noselect,menuone'
vim.opt.ttyfast = true
vim.opt.lazyredraw = true
vim.opt.visualbell = true
vim.opt.clipboard = 'unnamedplus'
vim.opt.spelllang = 'en_us'
vim.opt.updatetime = 100
vim.opt.virtualedit = 'block'
vim.opt.autoread = true

-- Auto-reload files when they change externally
vim.api.nvim_create_autocmd({ "FocusGained", "BufEnter" }, {
  command = "checktime",
})

-- Persistent Undo
if vim.fn.has('unix') == 1 then
  vim.fn.system('silent !mkdir -p $HOME/.config/nvim/tmp/backup')
  vim.fn.system('silent !mkdir -p $HOME/.config/nvim/tmp/undo')
  vim.fn.system('silent !mkdir -p $HOME/.config/nvim/spell')
end

vim.opt.spellfile = vim.fn.expand('$HOME/.config/nvim/spell/en.utf-8.add')
vim.opt.backupdir = vim.fn.expand('$HOME/.config/nvim/tmp/backup')
vim.opt.directory = vim.fn.expand('$HOME/.config/nvim/tmp/backup')

if vim.fn.has('persistent_undo') == 1 then
  vim.opt.undofile = true
  vim.opt.undodir = vim.fn.expand('$HOME/.config/nvim/tmp/undo')
end

-- Terminal Behavior
vim.g.neoterm_autoscroll = 1
vim.cmd('autocmd TermOpen term://* startinsert')
vim.keymap.set('t', '<C-N>', '<C-\\><C-N>', { noremap = true })
vim.keymap.set('t', '<C-O>', '<C-\\><C-N><C-O>', { noremap = true })

-- Set <LEADER> as <SPACE>
vim.g.mapleader = ' '

-- Key Mappings
local opts = { noremap = true, silent = true }
local remap_opts = { noremap = true }

-- ; as :
vim.keymap.set({ 'n', 'v' }, ';', ':', remap_opts)

-- Save and Quit
vim.keymap.set({ 'n', 'v' }, 'Q', ':q<CR>', opts)
vim.keymap.set({ 'n', 'v' }, '<C-q>', ':qa<CR>', opts)
vim.keymap.set({ 'n', 'v' }, 'S', ':w<CR>', opts)

-- Undo and Redo
vim.keymap.set({ 'n', 'v' }, 'l', 'u', opts)
vim.keymap.set({ 'n', 'v' }, 'j', '<C-R>', opts)

-- Insert Keys
vim.keymap.set({ 'n', 'v' }, 'k', 'i', opts)
vim.keymap.set({ 'n', 'v' }, 'K', 'I', opts)

-- Copy and Paste
vim.keymap.set('n', 'Y', 'y$', opts)

-- Indentation
vim.keymap.set('n', '<', '<<', opts)
vim.keymap.set('n', '>', '>>', opts)
vim.keymap.set('v', '<', '<gv', opts)
vim.keymap.set('v', '>', '>gv', opts)

-- Folding
vim.keymap.set({ 'n', 'v' }, '<Leader>o', 'za', opts)
vim.keymap.set({ 'n', 'v' }, '<Leader>O', 'zM', opts)
vim.keymap.set({ 'n', 'v' }, '<Leader>U', 'zR', opts)

-- Close all buffers except current
vim.keymap.set({ 'n', 'v' }, '<Leader>Q', ':w | %bd | e#<CR><CR>', opts)

-- Cursor Movement (Colemak-style)
vim.keymap.set({ 'n', 'v' }, 'u', 'k', opts)
vim.keymap.set({ 'n', 'v' }, 'n', 'h', opts)
vim.keymap.set({ 'n', 'v' }, 'e', 'j', opts)
vim.keymap.set({ 'n', 'v' }, 'i', 'l', opts)
vim.keymap.set({ 'n', 'v' }, 'gu', 'gk', opts)
vim.keymap.set({ 'n', 'v' }, 'ge', 'gj', opts)

-- U/E keys for 5 times u/e (faster navigation)
vim.keymap.set({ 'n', 'v' }, 'U', '5k', opts)
vim.keymap.set({ 'n', 'v' }, 'E', '5j', opts)

-- N key: go to the start of the line, I key: go to the end of the line
vim.keymap.set({ 'n', 'v' }, 'N', '0', opts)
vim.keymap.set({ 'n', 'v' }, 'I', '$', opts)

-- Faster in-line navigation
vim.keymap.set({ 'n', 'v' }, 'W', '5w', opts)
vim.keymap.set({ 'n', 'v' }, 'B', '5b', opts)

-- Set h (same as n, cursor left) to 'end of word'
vim.keymap.set({ 'n', 'v' }, 'h', 'e', opts)

-- Ctrl + U or E will move up/down the view port without moving the cursor
vim.keymap.set({ 'n', 'v' }, '<C-U>', '5<C-y>', opts)
vim.keymap.set({ 'n', 'v' }, '<C-E>', '5<C-e>', opts)

-- Delete w/out yanking
vim.keymap.set('n', '<leader>d', '"_d', opts)
vim.keymap.set('x', '<leader>d', '"_d', opts)
vim.keymap.set('x', '<leader>p', '"_dP', opts)

-- Insert Mode Cursor Movement
vim.keymap.set('i', '<C-i>', '<Esc>A', opts)
vim.keymap.set('i', '<C-n>', '<Esc>0', opts)

-- Searching
vim.keymap.set('n', '-', 'N', opts)
vim.keymap.set('n', '=', 'n', opts)
vim.keymap.set('n', '<Esc>', ':noh<CR>', opts)

-- Window management
vim.keymap.set({ 'n', 'v' }, '<Leader>w', '<C-w>w', opts)
vim.keymap.set({ 'n', 'v' }, '<Leader>u', '<C-w>k', opts)
vim.keymap.set({ 'n', 'v' }, '<Leader>e', '<C-w>j', opts)
vim.keymap.set({ 'n', 'v' }, '<Leader>n', '<C-w>h', opts)
vim.keymap.set({ 'n', 'v' }, '<Leader>i', '<C-w>l', opts)

-- Disable the default s key
vim.keymap.set({ 'n', 'v' }, 's', '<nop>', opts)

-- Split the screens
vim.keymap.set({ 'n', 'v' }, 'su', ':set nosplitbelow<CR>:split<CR>:set splitbelow<CR>', opts)
vim.keymap.set({ 'n', 'v' }, 'se', ':set splitbelow<CR>:split<CR>', opts)
vim.keymap.set({ 'n', 'v' }, 'sn', ':set nosplitright<CR>:vsplit<CR>:set splitright<CR>', opts)
vim.keymap.set({ 'n', 'v' }, 'si', ':set splitright<CR>:vsplit<CR>', opts)

-- Place the two screens up and down / side by side
vim.keymap.set({ 'n', 'v' }, 'sh', '<C-w>t<C-w>K', opts)
vim.keymap.set({ 'n', 'v' }, 'sv', '<C-w>t<C-w>H', opts)

-- Change window to tab
vim.keymap.set({ 'n', 'v' }, 'st', '<C-w>T', opts)

-- Tab management
vim.keymap.set({ 'n', 'v' }, 'tu', ':tabnew<CR>', opts)
vim.keymap.set({ 'n', 'v' }, 'tn', ':-tabnext<CR>', opts)
vim.keymap.set({ 'n', 'v' }, 'ti', ':+tabnext<CR>', opts)
vim.keymap.set({ 'n', 'v' }, 'tmn', ':-tabmove<CR>', opts)
vim.keymap.set({ 'n', 'v' }, 'tmi', ':+tabmove<CR>', opts)

-- Terminal
vim.keymap.set({ 'n', 'v' }, '<Leader>/', ':set splitbelow<CR>:split<CR>:execute "resize".(winheight(0)/2)<CR>:term<CR>', opts)
vim.keymap.set({ 'n', 'v' }, '<Leader>g', ':vsplit<CR>:execute "vertical resize".(winwidth(0)* 5/6)<CR>:term gemini<CR>', opts)

-- Utilities
vim.keymap.set({ 'n', 'v' }, '<Leader>sr', ':set relativenumber!<CR>', opts)
vim.keymap.set({ 'n', 'v' }, '<Leader>sc', ':set spell!<CR>', opts)
vim.keymap.set({ 'n', 'v' }, '<Leader>zz', '1z=', opts)
vim.keymap.set({ 'n', 'v' }, '`', '~', opts)

-- Find and replace
vim.keymap.set({ 'n', 'v' }, '<Leader>H', ':%s//<left>', remap_opts)
vim.keymap.set('x', '<Leader>H', ':s//<left>', remap_opts)
vim.keymap.set({ 'n', 'v' }, '<Leader>F', '/', opts)
vim.keymap.set({ 'n', 'v' }, '<Leader>h', ':noh<CR>', opts)

-- Screen movement
vim.keymap.set({ 'n', 'v' }, 'L', 'H', opts)
vim.keymap.set({ 'n', 'v' }, 'M', 'L', opts)
vim.keymap.set({ 'n', 'v' }, 'H', 'M', opts)

-- Buffer Management
vim.keymap.set('n', '<Tab>', '<C-i>', opts)
vim.keymap.set('n', '<Bs>', '<C-o>', opts)

-- Plugin Manager
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

require("lazy").setup({
  -- Colorscheme
  {
    "catppuccin/nvim", 
    name = "catppuccin", 
    priority = 1000,
    config = function()
      vim.cmd('colorscheme catppuccin-mocha')
    end
  },
  -- File explorer, load on startup
	{
		"nvim-tree/nvim-tree.lua",
		lazy = false,
		priority = 1000,
		dependencies = {
			"echasnovski/mini.icons",
		},
		init = function()
			require("mini.icons").setup()
			require("mini.icons").mock_nvim_web_devicons()
		end,
		opts = {
			filters = {
				dotfiles = false,
				custom = { ".DS_Store" },
			},
			hijack_netrw = true,
			disable_netrw = true,
			hijack_cursor = true,
			sync_root_with_cwd = true,
			update_focused_file = { enable = true, update_root = false },

			on_attach = function(bufnr)
				local api = require("nvim-tree.api")

				api.config.mappings.default_on_attach(bufnr)

				local function map(lhs, rhs, desc)
					vim.keymap.set("n", lhs, rhs, { buffer = bufnr, noremap = true, silent = true, nowait = true, desc = desc })
				end

				-- j → n (down), k → e (up) : use raw cursor movement
				map("e", "j", "Down", { remap = true })
				map("u", "k", "Up",   { remap = true })
				map("E", "5j", "Down", { remap = true })
				map("U", "5k", "Up",   { remap = true })

				map("`", api.tree.change_root_to_parent,"Change Root To Parent")
				map("~", api.tree.change_root_to_node,"Change Root To Node")
				map("R", api.tree.reload,"Refresh")

			end,
			view = {
				width = 34,
				side = "left",
				preserve_window_proportions = true,
			},
			renderer = {
				highlight_git = true,
				highlight_diagnostics = true,
				group_empty = true,
				icons = {
					show = {
						git = true,
						diagnostics = true,
					},
				},
			},
			git = {
				enable = true,
				ignore = false,
				timeout = 500,
			},
			diagnostics = {
				enable = true,
				show_on_dirs = true,
				show_on_open_dirs = true,
				debounce_delay = 50,
				icons = {
					hint = "󰌶",
					info = "",
					warning = "",
					error = "",
				},
			},
		},
		keys = {
			{ "<leader>t", "<cmd>NvimTreeToggle<cr>", desc = "Toggle NvimTree" },
		},
	},
  -- Status line
  {
    "itchyny/lightline.vim",
    event = "VeryLazy",
    init = function()
      vim.g.lightline = {
        colorscheme = 'wombat',
        active = {
          left = {
            { 'mode', 'paste' },
            { 'readonly', 'filename', 'modified'}
          }
        }
      }
    end,
  },

  -- Syntax highlighting and parsing
  {
    'nvim-treesitter/nvim-treesitter',
    build = ':TSUpdate',
    event = { "BufReadPost", "BufNewFile" },
    config = function()
      require('nvim-treesitter.configs').setup({
        ensure_installed = { "c", "typescript", "lua", "python", "javascript" },
        sync_install = false,
        auto_install = true,
        highlight = {
          enable = true,
          disable = {},
        },
      })
    end,
  },

  -- Rainbow delimiters
  {
    "HiPhish/rainbow-delimiters.nvim",
    event = { "BufReadPost", "BufNewFile" },
  },

  -- Git diff view
  {
    "sindrets/diffview.nvim",
    cmd = { "DiffviewOpen", "DiffviewClose", "DiffviewFileHistory" },
  },

  -- Comments
  {
    "scrooloose/nerdcommenter",
    keys = {
      { "<Leader>a", "<plug>NERDCommenterToggle", mode = { "n", "v" }, desc = "Toggle comment" },
      { "<Leader>A", "<plug>NERDCommenterSexy", mode = { "n", "v" }, desc = "Sexy comment" },
    },
  },

  -- Icons
  {
    "echasnovski/mini.icons",
    opts = {},
    lazy = true,
    specs = {
      { "nvim-tree/nvim-web-devicons", enabled = true, optional = true },
    },
    init = function()
      package.preload["nvim-web-devicons"] = function()
        require("mini.icons").mock_nvim_web_devicons()
        return package.loaded["nvim-web-devicons"]
      end
    end,
  },

  -- LaTeX support
  {
    "lervag/vimtex",
    ft = "tex",
    keys = {
      { "<Leader>L", ":VimtexTocToggle<CR>", desc = "Toggle LaTeX TOC" },
      { "<Leader>v", ":VimtexView<CR>", desc = "View LaTeX" },
    },
    init = function()
      vim.g.tex_flavor = 'latex'
      vim.g.vimtex_view_method = 'skim'
      vim.g.vimtex_view_skim_sync = 1
      vim.g.vimtex_view_skim_activate = 1
    end,
    config = function()
      local function write_server_name()
        local nvim_server_file = (vim.fn.has('win32') == 1 and os.getenv('TEMP') or '/tmp') .. '/vimtexserver.txt'
        vim.fn.writefile({vim.fn.serverstart()}, nvim_server_file)
      end

      vim.api.nvim_create_augroup('vimtex_common', { clear = true })
      vim.api.nvim_create_autocmd('FileType', {
        group = 'vimtex_common',
        pattern = 'tex',
        callback = write_server_name,
      })
    end,
  },

  -- CSS color preview
  {
    "ap/vim-css-color",
    ft = {"css", "scss", "sass", "less"},
  },

  -- Markdown preview
  {
    "iamcco/markdown-preview.nvim",
    build = 'cd app && yarn install',
    ft = 'markdown',
  },

  -- Telescope fuzzy finder
  {
    "nvim-telescope/telescope.nvim",
    dependencies = { "nvim-lua/plenary.nvim" },
    cmd = "Telescope",
    keys = {
      { "<leader><leader>", ":Telescope commands<CR>", desc = "Command palette" },
      { "<leader>ff", ":Telescope current_buffer_fuzzy_find<CR>", desc = "Fuzzy find in buffer" },
      { "<leader>fF", ":Telescope live_grep search_dirs=./<CR>", desc = "Live grep" },
      { "<leader>fr", ":Telescope lsp_references<CR>", desc = "LSP references" },
      { "<leader>fz", ":Telescope spell_suggest<CR>", desc = "Spell suggestions" },
      { "<leader>fb", ":Telescope buffers<CR>", desc = "Buffers" },
      { "<leader>fg", ":Telescope git_status<CR>", desc = "Git status" },
      { "<Leader><CR>", ":Telescope fd<CR>", desc = "Find files" },
    },
    config = function()
      require('telescope').setup({
        defaults = {
          file_ignore_patterns = {
            "node_modules",
            "target",
            "build",
            "build/.*",
            "dist",
          }
        },
        pickers = {
          find_files = {
            hidden = true
          }
        }
      })
    end,
  },

  -- LSP
  {
    'VonHeikemen/lsp-zero.nvim',
    branch = 'v3.x',
    lazy = true,
    config = false,
    init = function()
      vim.g.lsp_zero_extend_cmp = 0
      vim.g.lsp_zero_extend_lspconfig = 0
    end,
  },

  {
    'williamboman/mason.nvim',
    lazy = false,
    opts = {
      registries = {
        'github:mason-org/mason-registry',
      },
      ui = {
        icons = {
          package_installed = "✓",
          package_pending = "➜",
          package_uninstalled = "✗"
        }
      }
    },
  },
  -- Autocompletion
  {
    'hrsh7th/nvim-cmp',
    event = 'InsertEnter',
    dependencies = {
      {'L3MON4D3/LuaSnip', version = "v2.*", build = "make install_jsregexp"},
      {'hrsh7th/cmp-nvim-lsp'},
    },
    config = function()
      local lsp_zero = require('lsp-zero')
      lsp_zero.extend_cmp()

      local cmp = require('cmp')
      local ls = require("luasnip")

      -- Custom Tab handling for cmp -> Copilot -> Tab
      vim.keymap.set({ "i", "s" }, "<Tab>", function()
        if cmp.visible() then
          cmp.confirm({ select = true })
          return
        end

        vim.defer_fn(function()
          if cmp.visible() then
            cmp.confirm({ select = true })
            return
          end

          local keys = vim.fn["copilot#Accept"]("\\<Tab>")
          vim.api.nvim_feedkeys(keys, "n", true)
        end, 150)
      end, { silent = true, noremap = true, desc = "cmp → Copilot → <Tab>" })

      cmp.setup({
        sources = {
          { name = 'nvim_lsp' },
          { name = 'buffer' },
          { name = 'path' },
        },
        mapping = cmp.mapping.preset.insert({
          ['<CR>'] = cmp.mapping.confirm({select = false}),
        }),
        preselect = 'item',
        completion = {
          completeopt = 'menu,menuone,noinsert',
        },
        window = {
          completion = cmp.config.window.bordered(),
          documentation = cmp.config.window.bordered(),
        }
      })
        if ls.choice_active() then
          ls.change_choice(1)
        end
      end, {silent = true})
    end
  },

  -- LSP
  {
    'neovim/nvim-lspconfig',
    cmd = {'LspInfo', 'LspInstall', 'LspStart'},
    event = {'BufReadPre', 'BufNewFile'},
    dependencies = {
      {'hrsh7th/cmp-nvim-lsp'},
      {'williamboman/mason-lspconfig.nvim'},
    },
    config = function()
      local lsp_zero = require('lsp-zero')
      lsp_zero.extend_lspconfig()

      lsp_zero.on_attach(function(client, bufnr)
        lsp_zero.default_keymaps({buffer = bufnr})
        vim.keymap.set('n', 'T', '<cmd>lua vim.lsp.buf.hover()<CR>', {buffer = bufnr})
        vim.keymap.set('n', '<LEADER>dd', ':lua vim.diagnostic.open_float(0, {scope="line"})<CR>', {buffer = bufnr})
        vim.keymap.set('n', '<LEADER>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', {buffer = bufnr})
        vim.keymap.set('n', '<LEADER>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', {buffer = bufnr})
        vim.keymap.set('n', '<LEADER>fd', '<cmd>lua vim.lsp.buf.definition()<CR>', {buffer = bufnr})
        vim.keymap.set('n', '<LEADER>gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', {buffer = bufnr})
      end)

      vim.diagnostic.config({virtual_text = false})

      lsp_zero.set_sign_icons({
        error = '✘',
        warn = '▲',
        hint = '⚑',
        info = '»'
      })

      require('mason-lspconfig').setup({
        handlers = {
          lsp_zero.default_setup,
        },
      })
    end
  },

  -- Formatter
  {
    'stevearc/conform.nvim',
    event = { 'BufWritePre' },
    cmd = { 'ConformInfo' },
    config = function()
      require("conform").setup({
        formatters_by_ft = {
          python = { "ruff" },
          go = { "gofmt" },
          javascript = { "prettier" },
          typescript = { "prettier" },
          javascriptreact = { "prettier" },
          typescriptreact = { "prettier" },
          json = { "prettier" },
          html = { "prettier" },
          css = { "prettier" },
          scss = { "prettier" },
          sass = { "prettier" },
          less = { "prettier" },
          markdown = { "prettier" },
        },
        format_on_save = {
          timeout_ms = 500,
          lsp_fallback = false,
        },
      })
    end,
  },

  -- Code runner
  {
    "CRAG666/code_runner.nvim",
    cmd = "RunCode",
    keys = {
      { "<Leader>rr", ":RunCode<CR>", desc = "Run code" }
    },
    config = function()
      require('code_runner').setup({
        filetype = {
          python = "python3 -u",
          typescript = "",
        },
      })
    end,
  },

  -- Comment box
  {
    "LudoPinelli/comment-box.nvim",
    cmd = { "CBccbox", "CBacbox", "CBllbox", "CBlcbox" },
  },

  -- Smart splits for window resizing
  {
    'mrjones2014/smart-splits.nvim',
    keys = {
      { '<left>', function() require('smart-splits').resize_left() end, desc = "Resize left" },
      { '<down>', function() require('smart-splits').resize_down() end, desc = "Resize down" },
      { '<up>', function() require('smart-splits').resize_up() end, desc = "Resize up" },
      { '<right>', function() require('smart-splits').resize_right() end, desc = "Resize right" },
    },
  },

  -- GitHub Copilot
  {
    "github/copilot.vim",
    event = "InsertEnter",
    init = function()
      vim.g.copilot_no_tab_map = true
      vim.g.copilot_assume_mapped = true
    end,
  },
})

-- Language support autocmds
vim.api.nvim_create_autocmd({ "BufEnter", "BufLeave" }, {
  pattern = { "*.js", "*.jsx", "*.ts", "*.tsx" },
  callback = function(args)
    if args.event == "BufEnter" then
      vim.cmd("syntax sync fromstart")
    else
      vim.cmd("syntax sync clear")
    end
  end,
})
